{"version":3,"file":"static/js/489.8191f7a8.chunk.js","mappings":"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","sources":["webpack://frontend/./src/pages/login/styles.module.scss?5525","pages/login/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginWrapper\":\"styles_loginWrapper__kJs2m\",\"formContent\":\"styles_formContent__94Sh4\"};","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Card, Label, Button, CardBody, FormGroup, Form, Input } from \"reactstrap\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\n// import { Store } from 'react-notifications-component';\nimport { withPromiseAndDispatch } from \"../../helpers\";\n\nimport { signInAsync } from \"../../redux/auth/authActions\";\n\nimport styles from \"./styles.module.scss\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst SignInSchema = Yup.object().shape({\n    username: Yup.string().required(\"Please enter your username\"),\n    password: Yup.string().required(\"Please enter your password\"),\n});\n\nconst Login = () => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const signIn = (ctx) => withPromiseAndDispatch(signInAsync, ctx, dispatch);\n\n    const formik = useFormik({\n        initialValues: { username: \"\", password: \"\" },\n        validationSchema: SignInSchema,\n        onSubmit: async (values) => {\n            // Store.removeNotification(); //bug\n            try {\n                const result = await signIn(values);\n                navigate(\"/\"); // redirect /\n            } catch (err) {\n                // Store.addNotification({\n                //   title: 'Error!',\n                //   message: err?.error_message ?? 'System error. Please try again.',\n                //   type: 'danger',\n                //   insert: 'top',\n                //   container: 'top-right',\n                //   animationIn: ['animate__animated', 'animate__fadeIn'],\n                //   animationOut: ['animate__animated', 'animate__fadeOut'],\n                //   dismiss: {\n                //     duration: 2000,\n                //   },\n                // });\n            }\n        },\n    });\n\n    useEffect(() => {\n        formik.setErrors({});\n    }, [formik.values]);\n\n    const _handleKeyDown = (e) => {\n        console.log(e);\n        if (e.keyCode === 13) {\n            e.preventDefault(); // Ensure it is only this code that runs\n            formik.handleSubmit();\n        }\n    };\n\n    return (\n        <div id=\"app-container\">\n            <div className=\"container-fluid\">\n                <div className=\"h-100\">\n                    <div className={styles.loginWrapper}>\n                        <Card className={styles.formContent}>\n                            <CardBody>\n                                <h4 className=\"mb-4\">Login to Zalo AILab Tools</h4>\n                                <Form className=\"av-tooltip tooltip-label-bottom\">\n                                    <FormGroup>\n                                        <Label className=\"d-block\">User name</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"username\"\n                                            placeholder=\"Enter username ...\"\n                                            value={formik.values.username}\n                                            onChange={formik.handleChange}\n                                            onKeyDown={_handleKeyDown}\n                                        />\n                                        {formik.errors.username && formik.touched.username && (\n                                            <div className=\"invalid-feedback d-block\">\n                                                {formik.errors.username}\n                                            </div>\n                                        )}\n                                    </FormGroup>\n\n                                    <FormGroup>\n                                        <Label className=\"d-block\">Password</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"password\"\n                                            type=\"password\"\n                                            placeholder=\"Enter password ...\"\n                                            value={formik.values.password}\n                                            onChange={formik.handleChange}\n                                            onKeyDown={_handleKeyDown}\n                                        />\n                                        {formik.errors.password && formik.touched.password && (\n                                            <div className=\"invalid-feedback d-block\">\n                                                {formik.errors.password}\n                                            </div>\n                                        )}\n                                    </FormGroup>\n\n                                    <Button color=\"secondary\" block onClick={formik.handleSubmit}>\n                                        Submit\n                                    </Button>\n                                </Form>\n                            </CardBody>\n                        </Card>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;\n"],"names":["SignInSchema","Yup","shape","username","required","password","dispatch","useDispatch","navigate","useNavigate","formik","useFormik","initialValues","validationSchema","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","ctx","withPromiseAndDispatch","signInAsync","sent","t0","stop","_x","apply","arguments","useEffect","setErrors","_handleKeyDown","e","console","log","keyCode","preventDefault","handleSubmit","_jsx","id","children","className","styles","Card","_jsxs","CardBody","Form","FormGroup","Label","Input","name","placeholder","value","onChange","handleChange","onKeyDown","errors","touched","type","Button","color","block","onClick"],"sourceRoot":""}